!function(o){var e={};function n(t){if(e[t])return e[t].exports;var r=e[t]={i:t,l:!1,exports:{}};return o[t].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=o,n.c=e,n.d=function(o,e,t){n.o(o,e)||Object.defineProperty(o,e,{enumerable:!0,get:t})},n.r=function(o){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(o,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(o,"__esModule",{value:!0})},n.t=function(o,e){if(1&e&&(o=n(o)),8&e)return o;if(4&e&&"object"==typeof o&&o&&o.__esModule)return o;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:o}),2&e&&"string"!=typeof o)for(var r in o)n.d(t,r,function(e){return o[e]}.bind(null,r));return t},n.n=function(o){var e=o&&o.__esModule?function(){return o.default}:function(){return o};return n.d(e,"a",e),e},n.o=function(o,e){return Object.prototype.hasOwnProperty.call(o,e)},n.p="",n(n.s=1)}([function(o,e,n){"use strict";function t(o,e){return o+e}n.d(e,"a",(function(){return t})),console.log("cargado suma.ts que exporta fn suma")},function(o,e,n){n(3),n(2),o.exports=n(4)},function(o,e,n){"use strict";n.r(e);var t=n(0);console.log("componente.ts cargado importando suma de suma"),console.log(Object(t.a)(100,500))},function(o,e,n){"use strict";n.r(e);var t=n(0),r=function(){function o(o,e){void 0===e&&(e=null),this.name=o,this.id=e,this.name=o}return o.prototype.myName=function(){return"Person's name: "+this.name},o.prototype.myId=function(){return null!=this.id?"Person's id: "+this.id:"Person's  is undefined "},o}();console.log("app.ts sumando importando suma "+Object(t.a)(10,20)+" valor");var u=Math.sqrt;function a(o){return o*o}console.log("se cargo cuadradolib.ts"),console.log("se cargo funcion exportada escribir_en_pantalla() desde documentwrite.ts");var c=function(){function o(){console.log("lanzado clase j")}return o.prototype.tipo=function(){console.log("soy del tipo jquery")},o.prototype.botonborra=function(){$("button").click((function(){$("#test").remove()}))},o}(),i=new r("krunal");console.log(i.myName());var s,l,d=new r("Stavros",1);console.log(d.myName()+"\n"+d.myId()),s="Hola escrito desde funcion de parametro",document.write(s),console.log("INDEX.TS cargo y imprime este mensaje"),console.log("un dibujo animado"),console.log(a(25)),console.log((l=3,u(a(4)+a(l))));var f=new c;f.tipo(),f.botonborra()},function(o,e,n){"use strict";n.r(e);var t=new(function(){function o(){console.log("clase lo de lodash cargada correcto")}return o.prototype.primero=function(o){return _.last(o)},o}());console.log("need_lodash se ejecuto ok 2"),console.log(t.primero(["sky","wood","forest","falcon","pear","ocean","planeta"]))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,